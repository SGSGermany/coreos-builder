#!/bin/bash
# coreos-builder
# A container to ease reprovisioning bare metal CoreOS instances.
#
# Copyright (c) 2021  SGS Serious Gaming & Simulations GmbH
#
# This work is licensed under the terms of the MIT license.
# For a copy, see LICENSE file or <https://opensource.org/licenses/MIT>.
#
# SPDX-License-Identifier: MIT
# License-Filename: LICENSE

set -eu -o pipefail
export LC_ALL=C.UTF-8
shopt -s nullglob

APP_PATH="/var/local/coreos-builder"

INSTALLER_SRC_PATH="/usr/local/src/coreos-installer"
INSTALLER_TARGET="x86_64-unknown-linux-gnu"

print_usage() {
    echo "Usage:"
    echo "  $(basename "$0") [--no-build-installer] [--no-download-image] [--no-cleanup]"
}

BUILD_INSTALLER="yes"
DOWNLOAD_IMAGE="yes"
CLEANUP_IMAGES="yes"
while [ $# -gt 0 ]; do
    case "$1" in
        "--no-build-installer")
            BUILD_INSTALLER="no"
            ;;

        "--no-download-image")
            DOWNLOAD_IMAGE="no"
            ;;

        "--no-cleanup")
            CLEANUP_IMAGES="no"
            ;;

        *)
            print_usage >&2
            exit 1
    esac
    shift
done

if [ "$(id -u)" != "$(stat -c %u "$APP_PATH")" ]; then
    echo "You must run \`coreos-builder\` as user '$(stat -c %U "$APP_PATH")'" >&2
    exit 1
fi

# build coreos-installer
if [ "$BUILD_INSTALLER" == "yes" ]; then
    echo "Building \`coreos-installer\`..."

    if [ -n "$(find "$INSTALLER_SRC_PATH" -mindepth 0 -maxdepth 0 -not -empty)" ]; then
        echo "Removing old sources..."
        rm -rf "$INSTALLER_SRC_PATH"/*
    fi

    echo "Downloading sources from crates.io..."
    cd "$INSTALLER_SRC_PATH"
    cargo download -x coreos-installer

    echo "Building \`coreos-installer\`..."
    cd coreos-installer-*
    cargo build --release --target "$INSTALLER_TARGET"

    echo "Successfully built \`coreos-installer\`"
    ./target/"$INSTALLER_TARGET"/release/coreos-installer --version

    echo "Copying \`coreos-installer\` binary..."
    cp ./target/"$INSTALLER_TARGET"/release/coreos-installer "$APP_PATH/coreos-installer"

    [ "$DOWNLOAD_IMAGE" != "yes" ] && [ "$CLEANUP_IMAGES" != "yes" ] || echo
fi

# download image
if [ "$DOWNLOAD_IMAGE" == "yes" ]; then
    echo "Downloading CoreOS image..."
    cd "$APP_PATH"
    ./coreos-installer download --directory "$APP_PATH" --format "raw.xz"

    echo "Symlinking latest CoreOS image..."
    LATEST_IMAGE="$(find "$APP_PATH" -name 'fedora-coreos-*.x86_64.raw.xz' -type f -printf '%f\0' | sort -z -r | cut -d $'\0' -f 1)"
    ln -f -s "$LATEST_IMAGE" "$APP_PATH/fedora-coreos-latest.x86_64.raw.xz"
    ln -f -s "$LATEST_IMAGE.sig" "$APP_PATH/fedora-coreos-latest.x86_64.raw.xz.sig"

    [ "$CLEANUP_IMAGES" != "yes" ] || echo
fi

# cleanup images
if [ "$CLEANUP_IMAGES" == "yes" ]; then
    echo "Cleaning up old CoreOS images..."
    LATEST_IMAGE="$(readlink "$APP_PATH/fedora-coreos-latest.x86_64.raw.xz")"
    for IMAGE in "$APP_PATH/fedora-coreos-"*".x86_64.raw.xz"; do
        IMAGE_NAME="$(basename "$IMAGE")"
        if [ "$IMAGE_NAME" != "fedora-coreos-latest.x86_64.raw.xz" ] && [ "$IMAGE_NAME" != "$LATEST_IMAGE" ]; then
            echo "Removing '$IMAGE_NAME'..."
            rm -f "$IMAGE" "$IMAGE.sig"
        fi
    done
fi
